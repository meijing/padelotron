# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end
Capybara.configure do |c|
  c.server_port = 3001
  c.app_host = "http://localhost:3001"
  #c.server {|app, port| Capybara.run_default_server(app, 3002)}
end

class FacebookTestUsers
  unless File.exists? "db/fb_test_users.yaml"
    raise "Please generate first the facebook test users file"
  end
  @facebook_players = YAML.load(File.open("db/fb_test_users.yaml"))
  #offset where uninstalled players start in the list
  @offset = @facebook_players.count -5

  def self.named(name)
    @facebook_players.select{ |p| p['name'] == name}.first
  end

  def self.nth(n, options = {:confirmed => true})
    ofset = options[:confirmed] ? 0 : @offset
    @facebook_players[n + ofset]
  end

end
## You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     DatabaseCleaner.strategy = :truncation, {:except => %w[widgets]}
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#
include Warden::Test::Helpers

  After{ Warden.test_reset! }
#
#World(Warden::Test::Helpers,Warden::Test::WardenHelpers)
#
#After{ Warden.test_reset! }
#
#require 'factory_girl'
#require File.dirname(__FILE__) + '/../../spec/factories/customer.rb'
#require File.dirname(__FILE__) + '/../../spec/factories/game.rb'
#require File.dirname(__FILE__) + '/../../spec/factories/player.rb'
#require File.dirname(__FILE__) + '/../../spec/factories/team.rb'
